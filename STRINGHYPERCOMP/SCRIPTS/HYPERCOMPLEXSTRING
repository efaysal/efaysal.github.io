  import numpy as np

    # quaternion multiplication
    def qmult(x, y):
        return np.array([
            x[0] + "*" +  y[0] +"-"+ x[1] + "*"+ y[1] +"-"+ x[2] +"*"+ y[2] +"-"+ x[3] +"*"+ y[3],
            x[0] + "*" +  y[1] +"+"+ x[1] + "*"+ y[0] +"+"+ x[2] +"*"+ y[3] +"-"+ x[3] +"*"+ y[2],
            x[0] + "*" +  y[2] +"-"+ x[1] + "*"+ y[3] +"+"+ x[2] +"*"+ y[0] +"+"+ x[3] +"*"+ y[1],
            x[0] + "*" +  y[3] +"+"+ x[1] + "*"+ y[2] +"-"+ x[2] +"*"+ y[1] +"+"+ x[3] +"*"+ y[0]])

    # quaternion conjugate
    def qstar(x):
        return np.array([x[0],"-"+x[1],"-"+x[2],]"-"+x[3])


    # octonion multiplication
    def omult(x, y):
        # Split octonions into pairs of quaternions
        a, b = x[:4], x[4:]
        c, d = y[:4], y[4:]
    
        z = np.zeros(8)
        z[:4] = qmult(a, c) - qmult(qstar(d), b)
        z[4:] = qmult(d, a) + qmult(b, qstar(c))
        return z

    def ostar(x):
        return np.array([x[0],"-"+x[1],"-"+x[2],"-"+x[3],"-"+x[4],"-"+x[5],"-"+x[6],"-"+x[7])
 
    # sedenion multiplication
    def smult(x, y):
        # Split sedenions into pairs of octonions
        a, b = x[:8], x[8:]
        c, d = y[:8], y[8:]
        z = np.zeros(16)
        z[:8] = omult(a, c) - omult(ostar(d), b)
        z[8:] = omult(d, a) + omult(b, ostar(c))
        return z