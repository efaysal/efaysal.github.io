axis(2,sas,las=2,cex.axis = 0.9,col=COLX)
saqs=1:dim(B)[2]
text(saqs, minx*.99,srt = 30, adj= 1, xpd = TRUE,labels = names(B), cex=cexbox,col=COLX)
dev.off()
mmdQDRMx=data.frame(nmux)
names(mmdQDRMx)=c(NCONX)
sector="Spreading Point Inflection Network(SPIN)"
dQDRMMM=apply(mmdQDRMx,2,mean)
wsas=order(dQDRMMM)
SAA=wsas
# boxplot(MUXAx[,SAA])
B=data.frame(100*((mmdQDRMx[,SAA])) )
names(B)=c(NCONX)[SAA]
saa=colors()
U=rep(0,length(saa))
U[grep("dark",saa)]=1
#COLX=sample(saa[U == 1 ],dim(B)[2])
COLX=rep("purple" ,dim(B)[2])
COLX=rep("purple",dim(B)[2])
COLX[which(t(B)< max(hmuchx)  )]="purple4"
dsa=paste("  \n Recent  "
, max(hmuchx),"Days, Iterated over Last ",iterx+1,  " Days \n   (_oio_) Calculation Processed " ,dddt)
if(dim(B)[2] > 70 ) cexbox=.6
if(dim(B)[2] <= 70) cexbox=.6
FCX=paste("C:/Users/faysal el khettabi/Desktop/HDCOVI19/deep/UKREGIONS/normOUTINPROCESSES",etfs,"provincesUK.pdf",sep="")
#  FCX=gsub(" ", "",FCX)
COLXx=COLX
pdf(FCX,width=8,height=6,paper='special')
boxplot(round((B),2)
,col=COLXx,main=paste( sector, dsa )
,ylab="SPIN-Stationary Distribution (x100)",axes=FALSE)
if(dim(B)[2] > 70 ) grid(nx=20, ny=20)
if(dim(B)[2] <= 70) grid(nx=20, ny=20)
#axis(1,1:dim(B)[2],names(B),las=2,cex.axis = 0.9)
minx=round(min(apply(B,2,min)),2)
maxx=round(max(apply(B,2,max)),2)
sas=minx+(maxx-minx)*(0:10)/10
COLX=rep("purple",dim(B)[2])
axis(2,sas,las=2,cex.axis = 0.9,col=COLX)
saqs=1:dim(B)[2]
text(saqs, minx*.99,srt = 30, adj= 1, xpd = TRUE,labels = names(B), cex=cexbox,col=COLX)
dev.off()
economicsx=economicsx121[,c(1,wsasSPIN+1)]
library(reshape2)
ecm <- reshape2::melt(economicsx, id.vars = 'date')
p7 <- nPlot(value~date,group = 'variable', data = ecm,type = 'lineChart',width = 1000, height = 600)
p7$xAxis(
tickFormat =   "#!
function(d) {return d3.time.format('%Y-%m-%d')(new Date((d+1)*1000*3600*24));}
!#",
rotateLabels = -40
)
p7$chart(useInteractiveGuideline=FALSE)
p7$chart(showLegend = TRUE)
p7$xAxis( axisLabel = paste( " Raw Data: datahub.io/core/covid-19/r/countries-aggregated.csv")  , width = 60)
p7$chart(margin = list(left = 40))
p7$yAxis( axisLabel = "Normalized Confirmed Values: Divided by Maximum Value (%) (_oio_)", width = 40 )
FCX=paste("C:/Users/faysal el khettabi/Desktop/HDCOVI19/deep/UKREGIONS/sorteddatahubiocoreprovincesUK_COVID19aggregated",".html",sep="")
p7$save(FCX, standalone = TRUE)
n0=length(qqqt)-iterx
n1=length(qqqt)
TASAA=apply(PIX,2,max)
KSAX=order(TASAA)
remove(economicsx) #
Qeconomicsx=data.frame(date=as.Date(qqqt[n0:n1]),PIX[,KSAX]) #
names(Qeconomicsx)=c("date",NCONX[KSAX] )  #
names(Qeconomicsx)=gsub(" ","",names(Qeconomicsx))
summary(Qeconomicsx)
dim(Qeconomicsx)
library(reshape2)
ecm <- reshape2::melt(Qeconomicsx, id.vars = 'date')
p7 <- nPlot(value~date,group = 'variable', data = ecm,type = 'lineChart',width = 1000, height = 600)
p7$xAxis(
tickFormat =   "#!
function(d) {return d3.time.format('%Y-%m-%d')(new Date((d+1)*1000*3600*24));}
!#",
rotateLabels = -40
)
p7$chart(useInteractiveGuideline=FALSE)
p7$chart(showLegend = TRUE)
p7$xAxis( axisLabel = paste( " Raw Data: datahub.io/core/covid-19/r/countries-aggregated.csv")  , width = 60)
p7$chart(margin = list(left = 40))
p7$yAxis( axisLabel = "Iterated Point of Inflections (Days) (_oio_)", width = 40 )
FCX=paste("C:/Users/faysal el khettabi/Desktop/HDCOVI19/deep/UKREGIONS/IteratedINFLECTIONPS_UK_COVID19aggregated",".html",sep="")
p7$save(FCX, standalone = TRUE)
stop()
source('C:/Users/faysal el khettabi/Desktop/ssscripts/ssscripts/USA_VAR_ID_COVD19.R')
rm(list=ls(all=TRUE))
daysa=7
d1iffx=5000
# function needed for FITTING purposes
Gompertzmodel4PARAMS = function(B,C,D,E,x) {
C+(D-C)*(exp(-(exp(-B*(x-E)))))
}
library(shiny)
library(rCharts)
library(ggplot2)
require(gplots)
require("drc")
multiarray = list();
dddt=date()
dddd1=cbind()
#RAW DATA
etfs="Actual_Most_Infected_USA_STATES_COVID19"
flx="C:/Users/faysal el khettabi/Documents/GitHub/covid-19-data/us-states.csv"
#
# flx="https://github.com/nytimes/covid-19-data/blob/master/us-states.csv"
covd=read.csv(flx,header=TRUE)
cnw=names(table(covd$state))
cntrx=sort(unique(cnw))
NCONX=c()
hmuchx=c()
DEATHCONFIRMED=cbind()
INFECTIONS=cbind()
INFECTIONSD=cbind()
for( cnx in cntrx)
{
taw0=which(cnx == covd$state)
aqaa1=length(sort(covd$cases[taw0]))
aqaa0=length(sort(covd$cases[taw0]))-daysa
qaxa=sort(covd$cases[taw0])[aqaa1]-sort(covd$cases[taw0])[aqaa0]
if( qaxa < d1iffx ) next()
#if("US" != cnx)  next()
taw0=which(cnx == covd$state)
if(length(taw0) == 0 ) next()
NCONX=c(NCONX,cnx)
hmuchx=c(hmuchx,length(taw0))
}
datx=rbind()
RPANELDATAX=rbind()
hmuchxm=max(hmuchx)
counn=c()
for( cnx in NCONX)
{
#if("US" != cnx)  next()
taw0=which(cnx == covd$state)
aqaa1=length(sort(covd$cases[taw0]))
aqaa0=length(sort(covd$cases[taw0]))-daysa
qaxa=sort(covd$cases[taw0])[aqaa1]-sort(covd$cases[taw0])[aqaa0]
if( qaxa < d1iffx ) next()
if(length(taw0) < hmuchxm ) Idatax1=c(rep(0,hmuchxm-length(taw0)),sort(covd$cases[taw0]))
if(length(taw0) == hmuchxm ) Idatax1=sort(covd$cases[taw0])
if(length(taw0) == hmuchxm ) timexO=sort(covd$date[taw0])
if(length(taw0) < hmuchxm ) Ddatax1=c(rep(0,hmuchxm-length(taw0)),sort(covd$deaths[taw0]))
if(length(taw0) == hmuchxm ) Ddatax1=sort(covd$deaths[taw0])
INFECTIONS=cbind(INFECTIONS,diff(as.numeric(Idatax1)))
INFECTIONSD=cbind(INFECTIONSD,diff(as.numeric(Ddatax1)))
RPANELDATAX=rbind(RPANELDATAX,data.frame(State=rep(cnx,hmuchxm),Time=1:hmuchxm,Confirmed=as.numeric(Idatax1),Death=as.numeric(Ddatax1)))
Confirmed=as.numeric(Idatax1)
Death=as.numeric(Ddatax1)
Time=1:hmuchxm
model=lm(Death~Confirmed+Time)
datx=rbind(datx,c(model$coefficients[1],model$coefficients[2],model$coefficients[3]))
DEATHCONFIRMED=cbind(DEATHCONFIRMED,Death/(1+Confirmed))
counn=c(counn,cnx)
}
INFECTIONS=data.frame(INFECTIONS)
names(INFECTIONS)=counn
NFECTIONSD=data.frame(NFECTIONSD)
names(INFECTIONSD)=counn
#
NQ0=dim(INFECTIONS)[1]
NQ1=dim(INFECTIONS)[1]-100
dbx=log(INFECTIONSD[NQ1:NQ0,])
ibx=log(INFECTIONS[NQ1:NQ0,])
names(INFECTIONS)
WQ=dim(ibx)[2]-1
WQ=16
DBIB=data.frame(INFECTION=ibx[,WQ],DEATH=dbx[,WQ])
library(vars)
library(stargazer)
var <- VAR(DBIB, p = 3, type = "const" )
IRF <- irf(var, impulse = 'INFECTION', response = 'DEATH',  n.ahead = 20, boot = TRUE, runs = 100, ci = 0.95)
plot(IRF)
IRF <- irf(var, impulse = 'DEATH', response = 'INFECTION',  n.ahead = 20, boot = TRUE, runs = 100, ci = 0.95)
plot(IRF)
NCONX=counn
INFECTIONSq=data.frame((INFECTIONS))
names(INFECTIONSq)=counn
tail(INFECTIONSq)
nqq=dim(INFECTIONSq)[1]
nqq0=nqq-daysa
if(  nqq0 <= 0  )  nqq0 =1
dxtx11=data.frame(t(INFECTIONSq[nqq0:nqq,]))
sumx=apply(dxtx11,2,sum)
frequ=dxtx11
for( kk in 1:dim(dxtx11)[2])
{
frequ[,kk]=dxtx11[,kk]/sumx[kk]
}
qaqqq=t(frequ)
plot(sort(apply(qaqqq,2,mean)))
SAA=order(apply(qaqqq,2,mean))
B=data.frame(t(100*frequ)[,SAA])
names(B)=NCONX[SAA]
TICKS=NCONX[SAA]
saa=colors()
U=rep(0,length(saa))
U[grep("dark",saa)]=1
COLX=sample(saa,dim(B)[2])
dddt=date()
dsa1=paste("(Since Last",daysa,"Days)")
if(dim(B)[2] > 70 ) cexbox=.4
if(dim(B)[2] <= 70) cexbox=.6
if(dim(B)[2] > 70 ) cexbox=.4
if(dim(B)[2] <= 70) cexbox=.6
IB=B
sector=etfs
FCX=paste("C:/Users/faysal el khettabi/Desktop/HDCOVI19/deep/INFECTIONPROBAS/",etfs,"_IP_INFECTION_.pdf",sep="")
#  FCX=gsub(" ", "",FCX)
COLXx=COLX
dddt=date()
dsa1=paste("(Reported more than",d1iffx, "infections in the last",daysa,"days)")
dsa=paste("\n",dsa1, "\n (_oio_) " ,dddt)
pdf(FCX,width=8,height=6,paper='special')
boxplot(round((B),2)
,col=COLX,main=paste( sector, dsa )
,ylab=paste("Daily Relative Probability of Infection %"),axes=FALSE)
if(dim(B)[2] > 70 ) grid(nx=20, ny=20)
if(dim(B)[2] <= 70) grid(nx=20, ny=20)
#axis(1,1:dim(B)[2],names(B),las=2,cex.axis = 0.9)
minx=round(min(apply(B,2,min)),2)
maxx=round(round(max(apply(B,2,max)),2))
sas=round(minx+(maxx-minx)*(0:10)/10,2)
axis(2,sas,las=2,cex.axis = 0.9,col=COLX)
saqs=1:dim(B)[2]
text(saqs, -.99*minx,srt = 50, adj= 1, xpd = TRUE,labels = TICKS, cex=1,col="black")
dev.off()
NCONX=counn
INFECTIONSq=data.frame((INFECTIONSD))
names(INFECTIONSq)=counn
tail(INFECTIONSq)
nqq=dim(INFECTIONSq)[1]
nqq0=nqq-daysa
if(  nqq0 <= 0  )  nqq0 =1
dxtx11=data.frame(t(INFECTIONSq[nqq0:nqq,]))
sumx=apply(dxtx11,2,sum)
frequ=dxtx11
for( kk in 1:dim(dxtx11)[2])
{
frequ[,kk]=dxtx11[,kk]/sumx[kk]
}
qaqqq=t(frequ)
plot(sort(apply(qaqqq,2,mean)))
SAA=order(apply(qaqqq,2,mean))
B=data.frame(t(100*frequ)[,SAA])
names(B)=NCONX[SAA]
TICKS=NCONX[SAA]
saa=colors()
U=rep(0,length(saa))
U[grep("dark",saa)]=1
COLX=sample(saa,dim(B)[2])
if(dim(B)[2] > 70 ) cexbox=.4
if(dim(B)[2] <= 70) cexbox=.6
if(dim(B)[2] > 70 ) cexbox=.4
if(dim(B)[2] <= 70) cexbox=.6
DB=B
sector=etfs
FCX=paste("C:/Users/faysal el khettabi/Desktop/HDCOVI19/deep/INFECTIONPROBAS/",etfs,"_IP_Death_.pdf",sep="")
#  FCX=gsub(" ", "",FCX)
COLXx=COLX
pdf(FCX,width=8,height=6,paper='special')
boxplot(round((B),2)
,col=COLX,main=paste( sector, dsa )
,ylab=paste("Daily Relative Probability of Death %"),axes=FALSE)
if(dim(B)[2] > 70 ) grid(nx=20, ny=20)
if(dim(B)[2] <= 70) grid(nx=20, ny=20)
#axis(1,1:dim(B)[2],names(B),las=2,cex.axis = 0.9)
minx=round(min(apply(B,2,min)),2)
maxx=round(round(max(apply(B,2,max)),2))
sas=round(minx+(maxx-minx)*(0:10)/10,2)
axis(2,sas,las=2,cex.axis = 0.9,col=COLX)
saqs=1:dim(B)[2]
text(saqs, -.99*minx,srt = 50, adj= 1, xpd = TRUE,labels = TICKS, cex=1,col="black")
dev.off()
timexO
AQQA=cbind()
AQQAn=c()
for( qq in 1:dim(DB)[2])
{
QAQAQAQ=which(names(DB)[qq] == names(IB) )
AQQA=cbind(AQQA,as.numeric(IB[,QAQAQAQ]))
AQQA=cbind(AQQA,as.numeric(DB[,qq]))
AQQAn=c(AQQAn,paste("I_",names(DB)[qq],sep=""),paste("D_",names(DB)[qq],sep=""))
}
AQQA=data.frame(AQQA)
names(AQQA)=AQQAn
B=AQQA
names(B)=AQQAn
TICKS=AQQAn
saa=colors()
U=rep(0,length(saa))
U[grep("dark",saa)]=1
COLX=sample(saa,dim(B)[2])
if(dim(B)[2] > 70 ) cexbox=.4
if(dim(B)[2] <= 70) cexbox=.6
if(dim(B)[2] > 70 ) cexbox=.4
if(dim(B)[2] <= 70) cexbox=.6
sector=etfs
FCX=paste("C:/Users/faysal el khettabi/Desktop/HDCOVI19/deep/INFECTIONPROBAS/",etfs,"_IP_ID_.pdf",sep="")
#  FCX=gsub(" ", "",FCX)
COLXx=COLX
pdf(FCX,width=8,height=6,paper='special')
boxplot(round((B),2)
,col=COLX,main=paste( sector, dsa )
,ylab=paste("Daily Relative Probability (Infection & Death) %"),axes=FALSE)
if(dim(B)[2] > 70 ) grid(nx=20, ny=20)
if(dim(B)[2] <= 70) grid(nx=20, ny=20)
#axis(1,1:dim(B)[2],names(B),las=2,cex.axis = 0.9)
minx=round(min(apply(B,2,min)),2)
maxx=round(round(max(apply(B,2,max)),2))
sas=round(minx+(maxx-minx)*(0:10)/10,2)
axis(2,sas,las=2,cex.axis = 0.9,col=COLX)
saqs=1:dim(B)[2]
text(saqs, -.99*minx,srt = 50, adj= 1, xpd = TRUE,labels = TICKS, cex=1,col="black")
dev.off()
B=sqrt(IB*DB)
names(B)=names(IB)
TICKS=names(IB)
saa=colors()
U=rep(0,length(saa))
U[grep("dark",saa)]=1
COLX=sample(saa,dim(B)[2])
dddt=date()
if(dim(B)[2] > 70 ) cexbox=.4
if(dim(B)[2] <= 70) cexbox=.6
if(dim(B)[2] > 70 ) cexbox=.4
if(dim(B)[2] <= 70) cexbox=.6
sector=etfs
FCX=paste("C:/Users/faysal el khettabi/Desktop/HDCOVI19/deep/INFECTIONPROBAS/",etfs,"_IP_IxD_.pdf",sep="")
#  FCX=gsub(" ", "",FCX)
COLXx=COLX
pdf(FCX,width=8,height=6,paper='special')
boxplot(round((B),2)
,col=COLX,main=paste( sector, dsa )
,ylab=paste("Daily Relative Probability (Infection times Death) %"),axes=FALSE)
if(dim(B)[2] > 70 ) grid(nx=20, ny=20)
if(dim(B)[2] <= 70) grid(nx=20, ny=20)
#axis(1,1:dim(B)[2],names(B),las=2,cex.axis = 0.9)
minx=round(min(apply(B,2,min)),2)
maxx=round(round(max(apply(B,2,max)),2))
sas=round(minx+(maxx-minx)*(0:10)/10,2)
axis(2,sas,las=2,cex.axis = 0.9,col=COLX)
saqs=1:dim(B)[2]
text(saqs, -.99*minx,srt = 50, adj= 1, xpd = TRUE,labels = TICKS, cex=1,col="black")
dev.off()
BENI=1:1000
P=c()
Q=c()
Pinf=c()
for( jj in 1:1:1000)
{
p=runif(1)
q=runif(1)
P=c(P,p)
Q=c(Q,q)
pinf=.5+.5*runif(1)
Pinf=c(Pinf,pinf)
A=(1-pinf)/pinf
BB=((p+(1-p)*(q+(1-q)*(p*q)))-(p*q))/(1-(p*q))
B=BB/(1-BB)
lambda=0.7+0.1*runif(1)
sigma=1
alpha=0.7+0.1*runif(1)
z=sigma*sigma*log(A*B)/(2*alpha*(2*lambda-1))
x1= c(z,(z+.01*(1:100000))+(alpha*(2*lambda-1)))
x2= c(z,(z+.01*(1:100000))-(alpha*(2*lambda-1)))
N1=dnorm(x1, mean = 0, sd = sigma)
N2=dnorm(x2, mean = 0, sd = sigma)
BENI[jj]=sum((2*lambda-1)*(1-(p*q))*N1*N2/(+0.00000000000001+N1+N2))
}
plot(Pinf,BENI)
# install.packages("scatterplot3d") # Install
library("scatterplot3d") # load
# 3D scatter plot
trees=data.frame(Information_Production=P*Q,Signal_Accuracy=Pinf, Recovery=BENI)
trees=data.frame(PQ=P*Q,INFEC=Pinf, Recovery=BENI)
s3d <- scatterplot3d(trees, type = "h", color = "blue",
angle=55, pch = 16,main=paste("p",round(p,2),"q",round(q,2),"Prob_Infection",round(pinf,2)))
Sys.sleep(5)
BENI=1:dim(IB)
for( jj in 1:dim(IB)[2])
{
p=(100-mean(IB[,jj]))/100
q=(100-mean(DB[,jj]))/100
pinf=.5
A=(1-pinf)/pinf
BB=((p+(1-p)*(q+(1-q)*(p*q)))-(p*q))/(1-(p*q))
B=BB/(1-BB)
lambda=0.7+0.1*runif(1)
sigma=1
alpha=0.7+0.1*runif(1)
z=sigma*sigma*log(A*B)/(2*alpha*(2*lambda-1))
x1= c(z,(z+.01*(1:100000))+(alpha*(2*lambda-1)))
x2= c(z,(z+.01*(1:100000))-(alpha*(2*lambda-1)))
N1=dnorm(x1, mean = 0, sd = sigma)
N2=dnorm(x2, mean = 0, sd = sigma)
BENI[jj]=sum((2*lambda-1)*(1-(p*q))*N1*N2/(+0.00000000000001+N1+N2))
}
source('C:/Users/faysal el khettabi/Desktop/ssscripts/ssscripts/CANADAJ_DATA_COVID_.R')
source("C:/Users/faysal el khettabi/Desktop/ssscripts/ssscripts/GLOBAL_ARBITRAGEINDEXWORLDETFS.R")
#
# install.packages("installr")
#
# library(installr)
# updateR()
# require(devtools)
# install_github('ramnathv/rCharts')
rm(list=ls(all=TRUE))
library(shiny)
library(rCharts)
library(ggplot2)
require(gplots)
require("drc")
dddt=date()
# function needed for FITTING purposes
Gompertzmodel4PARAMS = function(B,C,D,E,x) {
C+(D-C)*(exp(-(exp(-B*(x-E)))))
}
source('C:/Users/faysal el khettabi/Desktop/ssscripts/ssscripts/IFPO.R')
df <- read.csv("https://raw.githubusercontent.com/globaldothealth/monkeypox/main/latest.csv")
df <- read.csv("https://raw.githubusercontent.com/globaldothealth/monkeypox/main/latest.csv")
countries=names(table(df$Country))
names(df)
df
# https://www.federalreserve.gov/newsevents/speech/clarida20181127a.htm
rm(list=ls(all=TRUE))
library("quantmod")
#source('~/Desktop/FEDBALANCESHEET/SCRIPTS/TATA.R')
library(shiny)
library(rCharts)
library(ggplot2)
# environment in which to store data
data <- new.env()
# set dates
date.start <- "2011-01-01"
date.end <- "2020-08-31"
tickersx <- read.table("file:///C:/Users/faysal el khettabi/Desktop/FREDINRE.txt",header=TRUE)
#
tickersx <- read.table("file:///C:/Users/faysal el khettabi/Desktop/FREDINRE14.txt",header=TRUE)
#
tickersx <- read.table("file:///C:/Users/faysal el khettabi/Desktop/FREDJUSTINRE.txt",header=TRUE)
#
tickersx <- read.table("C:/Users/faysal el khettabi/Desktop/FREDONLY.txt",header=TRUE)
#file:///C:/Users/faysal el khettabi/Desktop/equitiesFREDONLY.txt
tickersx <- read.table("C:/Users/faysal el khettabi/Desktop/RFREDequitiesFREDONLY.txt",header=TRUE)
guess_period <- function(x) {
average_period <- as.double( mean(diff(index(x))), units="days" )
difference <- abs(log( average_period / c(
daily = 1,
business_days = 7/5,
weekly = 7,
monthly = 30,
quarterly = 365/4,
annual = 365
) ) )
names( which.min( difference ) )
}
library(cluster)
tickers <- (unique(c( "DHHNGSP","DCOILBRENTEU","DCOILWTICO","CBBTCUSD",as.character(tickersx[,1]))))
MARGING=500
# import data from FRED database
for( kk in 1:length(tickers))
{
data <- new.env()
taz=getSymbols( as.character(tickers[kk])
, src = "FRED"  # needed!
, from = date.start  # ignored
, to = date.end  # ignored
, env = data
, adjust = TRUE)
dx=get(taz, envir =data)
dx=na.fill(dx,"extend")
weekli= grep( "Daily periodicity" , periodicity(dx) )
eee=guess_period(dx)
if( eee== "business_days" ) eee= "daily"
if( eee != "daily" )
{
print(periodicity(dx))
NASDAQCOM=data.frame(dx)
CQ=which(is.na(NASDAQCOM[,1])==FALSE)
NASDAQCOM=data.frame(INTERVAL=row.names(NASDAQCOM)[CQ],VALUE=NASDAQCOM[CQ,1])
cpi <- as.xts(NASDAQCOM$VALUE,order.by=as.Date(NASDAQCOM$INTERVAL))
daysx=na.spline(merge(cpi, foo=zoo(NA, order.by=seq(start(cpi), end(cpi),"day")))[, 1])
dx=daysx
}
ws=index(dx)
xs=data.frame(dx)
CQ=which(is.na(dx[,1])==FALSE)
dx1=as.numeric(dx[CQ,1])
dx2=dx1[(length(dx1)-MARGING):length(dx1)]
if(kk==1) DATA=dx2
if(kk>1) DATA=cbind(DATA,dx2)
if(kk==1) DATAt=ws[(length(ws)-MARGING):length(ws)]
if(kk>1) DATAt=cbind(DATAt,ws[(length(ws)-MARGING):length(ws)])
print(as.character(tickers[kk]))
}
timex=ws[(length(ws)-MARGING):length(ws)]
RETRO=dim(DATA)[1]-1
NAPRES=(dim(DATA)[1]-RETRO):dim(DATA)[1]
NAVANT=NAPRES
tickers
timexXX=timex
timex=timexXX[NAPRES]
dataxallq=data.frame(DATA[NAPRES,])  # ,CREDITSDIF=log(10*dataxall$TREAST/dataxall$M2) )  #,WASCURGDP=WASCURGDP[NAPRES]))
names(dataxallq)=c(tickers)
dataxall2=data.frame(dataxallq)  #,WASCURGDP=WASCURGDP[NAPRES]))
names(dataxall2)=c(tickers) #,"WASCURGDP")
source("C:/Users/faysal el khettabi/Desktop/ssscripts/ssscripts/STOCKMARKETS_FED_ONLY_INTEREST_2023.R")
source("C:/Users/faysal el khettabi/Desktop/ssscripts/ssscripts/STOCKMARKETS_FED_ONLY_INTEREST_2023.R")
source("C:/Users/faysal el khettabi/Desktop/ssscripts/ssscripts/STOCKMARKETS_FED_ONLY_INTEREST_2023.R")
source("C:/Users/faysal el khettabi/Desktop/ssscripts/ssscripts/STOCKMARKETS_FED_ONLY_INTEREST_2023.R")
