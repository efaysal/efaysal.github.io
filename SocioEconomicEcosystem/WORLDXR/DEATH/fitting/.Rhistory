COLXx=COLX
pdf(FCX,width=8,height=6,paper='special')
boxplot(round((B),2)
,col=COLXx,main=paste( sector, dsa )
,ylab="SPIN-Stationary Distribution (x100)",axes=FALSE)
if(dim(B)[2] > 70 ) grid(nx=20, ny=20)
if(dim(B)[2] <= 70) grid(nx=20, ny=20)
#axis(1,1:dim(B)[2],names(B),las=2,cex.axis = 0.9)
minx=round(min(apply(B,2,min)),2)
maxx=round(max(apply(B,2,max)),2)
sas=minx+(maxx-minx)*(0:10)/10
COLX=rep("purple",dim(B)[2])
axis(2,sas,las=2,cex.axis = 0.9,col=COLX)
saqs=1:dim(B)[2]
text(saqs, minx*.99,srt = 30, adj= 1, xpd = TRUE,labels = names(B), cex=cexbox,col=COLX)
dev.off()
mmdQDRMx=data.frame(nmux)
names(mmdQDRMx)=c(NCONX)
sector="Spreading Point Inflection Network(SPIN)"
dQDRMMM=apply(mmdQDRMx,2,mean)
wsas=order(dQDRMMM)
SAA=wsas
# boxplot(MUXAx[,SAA])
B=data.frame(100*((mmdQDRMx[,SAA])) )
names(B)=c(NCONX)[SAA]
saa=colors()
U=rep(0,length(saa))
U[grep("dark",saa)]=1
#COLX=sample(saa[U == 1 ],dim(B)[2])
COLX=rep("purple" ,dim(B)[2])
COLX=rep("purple",dim(B)[2])
COLX[which(t(B)< max(hmuchx)  )]="purple4"
dsa=paste("  \n Recent "
, max(hmuchx),"Days, Iterated over Last ",iterx+1,  " Days \n   (_oio_) Calculation Processed " ,dddt)
if(dim(B)[2] > 70 ) cexbox=.6
if(dim(B)[2] <= 70) cexbox=.6
FCX=paste("C:/Users/faysal/Desktop/HDCOVI19/deep/CANADA/normOUTINPROCESSES",etfs,".pdf",sep="")
#  FCX=gsub(" ", "",FCX)
COLXx=COLX
pdf(FCX,width=8,height=6,paper='special')
boxplot(round((B),2)
,col=COLXx,main=paste( sector, dsa )
,ylab="SPIN-Stationary Distribution (x100)",axes=FALSE)
if(dim(B)[2] > 70 ) grid(nx=20, ny=20)
if(dim(B)[2] <= 70) grid(nx=20, ny=20)
#axis(1,1:dim(B)[2],names(B),las=2,cex.axis = 0.9)
minx=round(min(apply(B,2,min)),2)
maxx=round(max(apply(B,2,max)),2)
sas=minx+(maxx-minx)*(0:10)/10
COLX=rep("purple",dim(B)[2])
axis(2,sas,las=2,cex.axis = 0.9,col=COLX)
saqs=1:dim(B)[2]
text(saqs, minx*.99,srt = 30, adj= 1, xpd = TRUE,labels = names(B), cex=cexbox,col=COLX)
dev.off()
economicsx=economicsx121[,c(1,wsasSPIN+1)]
library(reshape2)
ecm <- reshape2::melt(economicsx, id.vars = 'date')
p7 <- nPlot(value~date,group = 'variable', data = ecm,type = 'lineChart',width = 1000, height = 600)
p7$xAxis(
tickFormat =   "#!
function(d) {return d3.time.format('%Y-%m-%d')(new Date((d+1)*1000*3600*24));}
!#",
rotateLabels = -40
)
p7$chart(useInteractiveGuideline=FALSE)
p7$chart(showLegend = TRUE)
p7$xAxis( axisLabel = paste( " Raw Data: datahub.io/core/covid-19/r/countries-aggregated.csv")  , width = 60)
p7$chart(margin = list(left = 40))
p7$yAxis( axisLabel = "Normalized Confirmed Values: Divided by Maximum Value (%) (_oio_)", width = 40 )
FCX=paste("C:/Users/faysal/Desktop/HDCOVI19/deep/CANADA/sorteddatahubiocoreprovinces_CANADACOVID19aggregated",".html",sep="")
p7$save(FCX, standalone = TRUE)
TMXZ=1:dim(PIX)[1]
nxa=dim(PIX)[1]
dfs=rbind()
for( jj in 1:dim(PIX)[2])
{
fiyx=lm(log(1+PIX[nxa:1,jj])~TMXZ)
dfs=rbind(dfs,c(Growth=fiyx$coefficients[2],Pvalue=summary(fiyx)$coefficients[2,4]))
}
data.frame(c(NCONX),dfs)
nxa=dim(PIX)[1]
n0=length(qqqt)-iterx
n1=length(qqqt)
TASAA=apply(PIX,2,max)
KSAX=order(TASAA)
remove(economicsx) #
Qeconomicsx=data.frame(date=as.Date(qqqt[n0:n1]),PIX[nxa:1,KSAX]) #
names(Qeconomicsx)=c("date",NCONX[KSAX] )  #
names(Qeconomicsx)=gsub(" ","",names(Qeconomicsx))
summary(Qeconomicsx)
dim(Qeconomicsx)
library(reshape2)
ecm <- reshape2::melt(Qeconomicsx, id.vars = 'date')
p7 <- nPlot(value~date,group = 'variable', data = ecm,type = 'lineChart',width = 1000, height = 600)
p7$xAxis(
tickFormat =   "#!
function(d) {return d3.time.format('%Y-%m-%d')(new Date((d+1)*1000*3600*24));}
!#",
rotateLabels = -40
)
p7$chart(useInteractiveGuideline=FALSE)
p7$chart(showLegend = TRUE)
p7$xAxis( axisLabel = paste( " Raw Data: datahub.io/core/covid-19/r/countries-aggregated.csv")  , width = 60)
p7$chart(margin = list(left = 40))
p7$yAxis( axisLabel = "Iterated Point of Inflections (Days) (_oio_)", width = 40 )
FCX=paste("C:/Users/faysal/Desktop/HDCOVI19/deep/CANADA/IteratedINFLECTIONPS_CANADA_COVID19aggregated",".html",sep="")
p7$save(FCX, standalone = TRUE)
stop()
stop()
rm(list=ls(all=TRUE))
dddt=date()
# function needed for FITTING purposes
Gompertzmodel4PARAMS = function(B,C,D,E,x) {
C+(D-C)*(exp(-(exp(-B*(x-E)))))
}
library(shiny)
library(rCharts)
library(ggplot2)
require(gplots)
require("drc")
# dsa="https://api.coronavirus.data.gov.uk/v2/data?areaType=ltla&metric=cumCasesBySpecimenDate&metric=newCasesBySpecimenDate&metric=cumCasesBySpecimenDateRate&format=csv"
# dsa="https://api.coronavirus.data.gov.uk/v2/data?areaType=utla&metric=cumCasesBySpecimenDate&metric=newCasesBySpecimenDate&metric=cumCasesBySpecimenDateRate&format=csv"
etfs="CANADA_COVID"
DAA="https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv"
confirmedw <- read.csv(DAA,header=T)
DAA="https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv"
deathw <- read.csv(DAA,header=T)
statesI=names(table(confirmedw$Country.Region))
dddt=date()
mux=rbind()
nmux=rbind()
etfs="Canada_COVID19"
# statesI=unique(c("Poland","India","Israel","US","Canada","Brazil","United States","South Africa","Russia","Australia" ,"Austria" ,"Malaysia"  , "Indonesia"  ,  "Singapore" , "Japan","Vietnam" , "Hong Kong SAR" ,"South Korea","Taiwan" ,"China","China (mainland)","Luxembourg" , "Austria","Belgium","Denmark","Finland","France","Germany","Greece","Iceland"
#        ,"Ireland","Italy","Monaco","Netherlands","Norway","Portugal","Spain"
#        ,"Sweden","Switzerland","United Kingdom"))
statesI=c("Canada")
etfs="Canada_COVID19"
# statesI=unique(c("Poland","India","Israel","US","Canada","Brazil","United States","South Africa","Russia","Australia" ,"Austria" ,"Malaysia"  , "Indonesia"  ,  "Singapore" , "Japan","Vietnam" , "Hong Kong SAR" ,"South Korea","Taiwan" ,"China","China (mainland)","Luxembourg" , "Austria","Belgium","Denmark","Finland","France","Germany","Greece","Iceland"
#        ,"Ireland","Italy","Monaco","Netherlands","Norway","Portugal","Spain"
#        ,"Sweden","Switzerland","United Kingdom"))
statesI=c("India")
wqa= which( statesI == confirmedw$Country.Region )
counn=confirmedw$Province.State[wqa]
counn
statesI
confirmedw$Province.State[wqa]
statesI=c("Sweden")
wqa= which( statesI == confirmedw$Country.Region )
counn=confirmedw$Province.State[wqa]
counn
wqa
statesI=c("Switzerland")
wqa= which( statesI == confirmedw$Country.Region )
counn=confirmedw$Province.State[wqa]
counn
source('C:/Users/faysal/Desktop/ssscripts/ssscripts/GERMANY_data_IP_COVD19.R')
source('C:/Users/faysal/Desktop/ssscripts/ssscripts/GERMANY_DEATH_data_IP_COVD19.R')
if(!require('remotes')) install.packages('remotes')
remotes::install_github("nevrome/covid19germany")
rki <- covid19germany::get_RKI_timeseries()
datax=covid19germany::group_RKI_timeseries(rki, Bundesland)
source('C:/Users/faysal/Desktop/ssscripts/ssscripts/LASTSEP2021UK_PPF_data_BOTH_INFECTIONS_AND_DEATHS_COVIDS.R')
ii
source('C:/Users/faysal/Desktop/ssscripts/ssscripts/LASTSEP2021UK_PPF_data_BOTH_INFECTIONS_AND_DEATHS_COVIDS.R')
source('C:/Users/faysal/Desktop/ssscripts/ssscripts/LASTSEP2021UK_PPF_data_BOTH_INFECTIONS_AND_DEATHS_COVIDS.R')
source('C:/Users/faysal/Desktop/ssscripts/ssscripts/LASTSEP2021UK_PPF_data_BOTH_INFECTIONS_AND_DEATHS_COVIDS.R')
source('C:/Users/faysal/Desktop/ssscripts/ssscripts/LASTSEP2021UK_PPF_data_BOTH_INFECTIONS_AND_DEATHS_COVIDS.R')
rm(list=ls(all=TRUE))
threinfections=45000  +
require("quantmod")
source('C:/Users/faysal/Desktop/ssscripts/ssscripts/IFPO.R')
dddt=date()
library(ukcovid19)
query_filters <- c(
"areaType=ltla"
)
cases_and_deaths = list(
date = "date",
areaName = "areaName",
areaCode = "areaCode",
newCasesByPublishDate = "newCasesByPublishDate",
newDeaths28DaysByPublishDate = "newDeaths28DaysByPublishDate"
)
dataL <- get_data(
filters = query_filters,
structure = cases_and_deaths
)
query_filters <- c(
"areaType=utla"
)
dataU <- get_data(
filters = query_filters,
structure = cases_and_deaths
)
regionsl=names(table(dataL$areaName))
regionsu=names(table(dataU$areaName))
table(c(regionsl,regionsu))
ALLDATA=dataU
regionst=names(table(ALLDATA$areaName))
timesx=names(table(ALLDATA$date))
ALLDATA
summary(ALLDATA)
summary(ALLDATA)
saaam=0
ff=0
for( ii in regionst )
{
ff=ff+1
sass=which(ALLDATA$areaName==ii)
if( saaam < length(ALLDATA$date[sass]) )
{
saaam=length(ALLDATA$date[sass])
ffm=ff
timesx=sort(ALLDATA$date[sass])
}
}
ALLDATA=
ALLDATA=
ALLDATA=
dataL
dataL
ALLDATA=dataL
regionst=names(table(ALLDATA$areaName))
for( ii in regionst )
{
ff=ff+1
sass=which(ALLDATA$areaName==ii)
if( saaam < length(ALLDATA$date[sass]) )
{
saaam=length(ALLDATA$date[sass])
ffm=ff
timesx=sort(ALLDATA$date[sass])
}
}
ALLDATA= dataU
tickssUU=c()
INFECTIONSXUU=cbind()
DEATHSXUU=cbind()
ALLDATA= dataU
tickssUU=c()
INFECTIONSXUU=cbind()
DEATHSXUU=cbind()
for( ii in regionst )
{
sass=which(ALLDATA$areaName==ii)
dsaa=saaam-length(ALLDATA$date[sass])
dsas=order(ALLDATA$date[sass])
dsax0=ALLDATA$newCasesByPublishDate[sass][dsas]
dsax=na.fill(dsax0, "extend")
if( max(cumsum(dsax)) < threinfections) next()
infectionsx0=c(rep(1,dsaa),cumsum(dsax))
infectionsx=na.fill(infectionsx0, "extend")
# plot(infectionsx)
# Sys.sleep(1)
dsax0=ALLDATA$newDeaths28DaysByPublishDate[sass][dsas]
dsax=na.fill(dsax0, "extend")
deathsx0=c(rep(1,dsaa),cumsum(dsax))
deathsx=na.fill(deathsx0, "extend")
# plot(deathsx)
tickssUU=c(tickssUU,ii)
INFECTIONSXUU=cbind(INFECTIONSXUU,infectionsx)
DEATHSXUU=cbind(DEATHSXUU,deathsx)
}
DEATHSXUU
rm(list=ls(all=TRUE))
threinfections=45000  +
require("quantmod")
source('C:/Users/faysal/Desktop/ssscripts/ssscripts/IFPO.R')
dddt=date()
library(ukcovid19)
query_filters <- c(
"areaType=ltla"
)
cases_and_deaths = list(
date = "date",
areaName = "areaName",
areaCode = "areaCode",
newCasesByPublishDate = "newCasesByPublishDate",
newDeaths28DaysByPublishDate = "newDeaths28DaysByPublishDate"
)
dataL <- get_data(
filters = query_filters,
structure = cases_and_deaths
)
query_filters <- c(
"areaType=utla"
)
dataU <- get_data(
filters = query_filters,
structure = cases_and_deaths
)
regionsl=names(table(dataL$areaName))
regionsu=names(table(dataU$areaName))
table(c(regionsl,regionsu))
ALLDATA=dataU
regionst=names(table(ALLDATA$areaName))
timesx=names(table(ALLDATA$date))
summary(ALLDATA)
saaam=0
ff=0
for( ii in regionst )
{
ff=ff+1
sass=which(ALLDATA$areaName==ii)
if( saaam < length(ALLDATA$date[sass]) )
{
saaam=length(ALLDATA$date[sass])
ffm=ff
timesx=sort(ALLDATA$date[sass])
}
}
ALLDATA=dataL
regionst=names(table(ALLDATA$areaName))
for( ii in regionst )
{
ff=ff+1
sass=which(ALLDATA$areaName==ii)
if( saaam < length(ALLDATA$date[sass]) )
{
saaam=length(ALLDATA$date[sass])
ffm=ff
timesx=sort(ALLDATA$date[sass])
}
}
ALLDATA= dataU
tickssUU=c()
INFECTIONSXUU=cbind()
DEATHSXUU=cbind()
for( ii in regionst )
{
sass=which(ALLDATA$areaName==ii)
dsaa=saaam-length(ALLDATA$date[sass])
dsas=order(ALLDATA$date[sass])
dsax0=ALLDATA$newCasesByPublishDate[sass][dsas]
dsax=na.fill(dsax0, "extend")
if( max(cumsum(dsax)) < threinfections) next()
infectionsx0=c(rep(1,dsaa),cumsum(dsax))
infectionsx=na.fill(infectionsx0, "extend")
# plot(infectionsx)
# Sys.sleep(1)
dsax0=ALLDATA$newDeaths28DaysByPublishDate[sass][dsas]
dsax=na.fill(dsax0, "extend")
deathsx0=c(rep(1,dsaa),cumsum(dsax))
deathsx=na.fill(deathsx0, "extend")
# plot(deathsx)
tickssUU=c(tickssUU,ii)
INFECTIONSXUU=cbind(INFECTIONSXUU,infectionsx)
DEATHSXUU=cbind(DEATHSXUU,deathsx)
}
ALLDATA= dataL
regionst=names(table(ALLDATA$areaName))
tickssLL=c()
INFECTIONSXLL=cbind()
DEATHSXLL=cbind()
for( ii in regionst )
{
sass=which(ALLDATA$areaName==ii)
dsaa=saaam-length(ALLDATA$date[sass])
dsas=order(ALLDATA$date[sass])
dsax0=ALLDATA$newCasesByPublishDate[sass][dsas]
dsax=na.fill(dsax0, "extend")
if( max(cumsum(dsax)) < threinfections) next()
infectionsx=c(rep(1,dsaa),cumsum(dsax))
# plot(infectionsx,main=ii)
# Sys.sleep(1)
dsax0=ALLDATA$newDeaths28DaysByPublishDate[sass][dsas]
dsax=na.fill(dsax0, "extend")
deathsx=c(rep(1,dsaa),cumsum(dsax))
matplot(data.frame(infectionsx/max(infectionsx),deathsx/max(deathsx)),main=ii,type="l")
grid(nx=35, ny=35)
Sys.sleep(2)
tickssLL=c(tickssLL,ii)
INFECTIONSXLL=cbind(INFECTIONSXLL,infectionsx)
DEATHSXLL=cbind(DEATHSXLL,deathsx)
}
tickssX=unique(c(tickssLL,tickssUU))
infectionsx=data.frame(INFECTIONSXLL,INFECTIONSXUU)
deathsx=data.frame(DEATHSXLL,DEATHSXUU)
infectionsxfinal=cbind()
deathsxfinal=cbind()
for( ccx in tickssX)
{
saqqa= which( ccx == tickssX )
infectionsxfinal=cbind(infectionsxfinal,apply(data.frame(infectionsx[,saqqa]),1,mean))
deathsxfinal=cbind(deathsxfinal,apply(data.frame(deathsx[,saqqa]),1,mean))
}
summary(deathsxfinal)
DEATHSXLL
summary(deathsxfinal)
tickssX=unique(c(tickssLL,tickssUU))
infectionsx=data.frame(INFECTIONSXLL,INFECTIONSXUU)
deathsx=data.frame(DEATHSXLL,DEATHSXUU)
infectionsxfinal=cbind()
deathsxfinal=cbind()
for( ccx in tickssX)
{
saqqa= which( ccx == tickssX )
infectionsxfinal=cbind(infectionsxfinal,apply(data.frame(infectionsx[,saqqa]),1,mean))
deathsxfinal=cbind(deathsxfinal,apply(data.frame(deathsx[,saqqa]),1,mean))
}
summary(deathsxfinal)
apply(data.frame(deathsx[,saqqa]),1,mean)
data.frame(deathsx[,saqqa])
data.frame(deathsx[,saqqa])
rrr=data.frame(deathsx[,saqqa])
length(is.na(rrr))
tickssX=unique(c(tickssLL,tickssUU))
infectionsx=data.frame(INFECTIONSXLL,INFECTIONSXUU)
deathsx=data.frame(DEATHSXLL,DEATHSXUU)
infectionsxfinal=cbind()
deathsxfinal=cbind()
for( ccx in tickssX)
{
saqqa= which( ccx == tickssX )
infectionsxfinal=cbind(infectionsxfinal,apply(data.frame(infectionsx[,saqqa]),1,mean))
rrr=data.frame(deathsx[,saqqa])
print(length(!is.na(rrr)))
deathsxfinal=cbind(deathsxfinal,apply(data.frame(deathsx[,saqqa]),1,mean))
}
summary(deathsxfinal)
is.na(rrr)
tickssX=unique(c(tickssLL,tickssUU))
infectionsx=data.frame(INFECTIONSXLL,INFECTIONSXUU)
deathsx=data.frame(DEATHSXLL,DEATHSXUU)
infectionsxfinal=cbind()
deathsxfinal=cbind()
for( ccx in tickssX)
{
saqqa= which( ccx == tickssX )
infectionsxfinal=cbind(infectionsxfinal,apply(data.frame(infectionsx[,saqqa]),1,mean))
rrr=data.frame(deathsx[,saqqa])
print(length( TRUE==is.na(rrr)))
deathsxfinal=cbind(deathsxfinal,apply(data.frame(deathsx[,saqqa]),1,mean))
}
summary(deathsxfinal)
data.frame(deathsx[,saqqa])
rrr=C(deathsx[,saqqa])
rrr
print(length( TRUE==is.na(rrr)))
is.na(rrr)
tickssX=unique(c(tickssLL,tickssUU))
infectionsx=data.frame(INFECTIONSXLL,INFECTIONSXUU)
deathsx=data.frame(DEATHSXLL,DEATHSXUU)
infectionsxfinal=cbind()
deathsxfinal=cbind()
for( ccx in tickssX)
{
saqqa= which( ccx == tickssX )
infectionsxfinal=cbind(infectionsxfinal,apply(data.frame(infectionsx[,saqqa]),1,mean))
rrr=apply(data.frame(deathsx[,saqqa]),1,mean)
print(length( TRUE==is.na(rrr)))
deathsxfinal=cbind(deathsxfinal,apply(data.frame(deathsx[,saqqa]),1,mean))
}
summary(deathsxfinal)
ccx in tickssX
tickssX
ccx
ccx= "Cardiff"
saqqa= which( ccx == tickssX )
infectionsxfinal=cbind(infectionsxfinal,apply(data.frame(infectionsx[,saqqa]),1,mean))
rrr=apply(data.frame(deathsx[,saqqa]),1,mean)
print(length( TRUE == is.na(rrr)))
rrr
is.na(rrr)
rrr=apply(data.frame(deathsx[,saqqa]),1,mean)
print(length( TRUE == is.na(rrr)))
tickssX=unique(c(tickssLL,tickssUU))
infectionsx=data.frame(INFECTIONSXLL,INFECTIONSXUU)
deathsx=data.frame(DEATHSXLL,DEATHSXUU)
infectionsxfinal=cbind()
deathsxfinal=cbind()
for( ccx in tickssX)
{
saqqa= which( ccx == tickssX )
infectionsxfinal=cbind(infectionsxfinal,apply(data.frame(infectionsx[,saqqa]),1,mean))
rrr=apply(data.frame(deathsx[,saqqa]),1,mean)
print(length(which(TRUE == is.na(rrr))))
deathsxfinal=cbind(deathsxfinal,apply(data.frame(deathsx[,saqqa]),1,mean))
}
summary(deathsxfinal)
tickssX=unique(c(tickssLL,tickssUU))
infectionsx=data.frame(INFECTIONSXLL,INFECTIONSXUU)
deathsx=data.frame(DEATHSXLL,DEATHSXUU)
infectionsxfinal=cbind()
deathsxfinal=cbind()
taz=c()
for( ccx in tickssX)
{
saqqa= which( ccx == tickssX )
rrr=apply(data.frame(deathsx[,saqqa]),1,mean)
if(length(which(TRUE == is.na(rrr))) > 400 ) next()
taz=c(taz ,ccx  )
infectionsxfinal=cbind(infectionsxfinal,apply(data.frame(infectionsx[,saqqa]),1,mean))
rrr=apply(data.frame(deathsx[,saqqa]),1,mean)
print(length(which(TRUE == is.na(rrr))))
deathsxfinal=cbind(deathsxfinal,apply(data.frame(deathsx[,saqqa]),1,mean))
}
tickssX=taz
summary(deathsxfinal)
tickssX
source('C:/Users/faysal/Desktop/ssscripts/ssscripts/LASTSEP2021UK_PPF_data_BOTH_INFECTIONS_AND_DEATHS_COVIDS.R')
source('C:/Users/faysal/Desktop/ssscripts/ssscripts/LASTSEP2021UK_PPF_data_BOTH_INFECTIONS_AND_DEATHS_COVIDS.R')
source('C:/Users/faysal/Desktop/ssscripts/ssscripts/LASTSEP2021UK_PPF_data_BOTH_INFECTIONS_AND_DEATHS_COVIDS.R')
source('C:/Users/faysal/Desktop/ssscripts/ssscripts/UK_SHORT__MOSTRECENTNOV2021_data_BOTH_INFECTIONS_AND_DEATHS_COVIDS.R')
source('C:/Users/faysal/Desktop/ssscripts/ssscripts/UK_SHORT__MOSTRECENTNOV2021_data_BOTH_INFECTIONS_AND_DEATHS_COVIDS.R')
source('C:/Users/faysal/Desktop/ssscripts/ssscripts/UK_SHORT__MOSTRECENTNOV2021_data_BOTH_INFECTIONS_AND_DEATHS_COVIDS.R')
source('C:/Users/faysal/Desktop/ssscripts/ssscripts/world_INFECTION_data_IP_COVD19.R')
source('C:/Users/faysal/Desktop/ssscripts/ssscripts/world_DEATH_data_IP_COVD19.R')
source('C:/Users/faysal/Desktop/ssscripts/ssscripts/world_INFECTION_data_IP_COVD19.R')
source('C:/Users/faysal/Desktop/ssscripts/ssscripts/world_INFECTION_data_IP_COVD19.R')
source('C:/Users/faysal/Desktop/ssscripts/ssscripts/world_INFECTION_data_IP_COVD19.R')
source('C:/Users/faysal/Desktop/ssscripts/ssscripts/world_DEATH_data_IP_COVD19.R')
